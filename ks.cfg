
# Load the minimal server preseed off cdrom
preseed preseed/file string /cdrom/preseed/ubuntu-server-minimalvm.seed
preseed netcfg/hostname string ss-mail1.sherinesafety.com

# Use local proxy
# Setup a server with apt-cacher-ng and enter that hostname here
#preseed mirror/http/proxy string http://my-local-cache:3142/

lang en_US
langsupport en_US
keyboard us
mouse
timezone America/Vancouver
rootpw --disabled
user gnordli --fullname "Geoff Nordli" --password test
sshkey --username=gnordli ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAts90yCE4B2lXB8FCC3xgIZ2sLxQptznNEuKdMRoSz4bKvyjTGzvOSa6DssRedaKn1aCENanPK+JF/FxS+8J9BOVhmHXLLwsFsrpSNynYNgKcW0xVc64QjU9DCIWFWhFp8rrPDJC0yb+oIrNOdBT7j+Ijb1VRFcFW59ZyY3xGrwM= gnordli
reboot
text
install
cdrom

#Change console size to 1024x768x24
preseed debian-installer/add-kernel-opts string "vga=792"

#System bootloader configuration
bootloader --location=mbr

#Clear the Master Boot Record
zerombr yes

#Partition clearing information
# `--all` will give message in install log about only clearing first drive but
# this is still needed
clearpart --all --initlabel

# If one of the disks that are going to be automatically partitioned

# contains an old LVM configuration, the user will normally receive a
# warning. This can be preseeded away...
d-i partman-lvm/device_remove_lvm boolean true
# The same applies to pre-existing software RAID array:
d-i partman-md/device_remove_md boolean true
# And the same goes for the confirmation to write the lvm partitions.
d-i partman-lvm/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true

#Advanced partition
# The last lv specified will take up the remaining space of the vg. To get
# around that add up all your disk sizes and set this value. It appears to
# factor in the size of non lvm partitions as well
preseed partman-auto/disk string /dev/vda
#preseed partman-auto-lvm/guided_size string 
part /boot --fstype=ext4 --size=1024 --asprimary --ondrive=vda
part swap --size=5120 --ondrive=vda
part pv.1 --grow --size=1 --asprimary --ondrive=vda
volgroup root_vg pv.1
logvol / --fstype=ext4 --name=root_vl --vgname=vg_root --size=1 --grow 
#logvol /usr --fstype=ext4 --name=usr --vgname=vg0 --size=2048
#logvol /var --fstype=ext4 --name=var --vgname=vg0 --size=1536
#logvol /var/log --fstype=ext4 --name=var_log --vgname=vg0 --size=512
#logvol swap --name=swap --vgname=vg0 --size=2048 --maxsize=2048
#logvol /home --fstype=ext4 --name=home --vgname=vg0 --size=512

# Don't install recommended items by default
# This will also be set for built system at
# /etc/apt/apt.conf.d/00InstallRecommends
preseed base-installer/install-recommends boolean false

#Network information
# If the system has a single interface the '--device' option isn't needed. If
# you do use it remember that in 18.04 the device names are different. For
# example I was seeing enp0s3 as the interface name.  I haven't tested this
# but you should be able to specify 'interface=enp0s3' as a boot paramater and
# it will be passed through to installer.  I have tested setting the device to
# 'auto' will have it automatically pick the first active interface
#network --bootproto=dhcp --device=enp0s3
network --bootproto=dhcp --device=auto

# Policy for applying updates. May be "none" (no automatic updates),
# "unattended-upgrades" (install security updates automatically), or
# "landscape" (manage system with Landscape).
preseed pkgsel/update-policy select unattended-upgrades

#Do not configure the X Window System
skipx

# Additional packages to install
# - Most of these would have installed if it wasn't for turning off
#   install-recommends
# - software-properties-common provides add-apt-repository which is needed for
#   adding additional PPAs. You can remove that if you don't plan on
#   installing anything.  The %post script needs it for adding git
# - Starting in 16.04 Ubuntu no longer installs python v2.7 by default.
#   Instead the default version of python is v3.x.  If you still need v2.7
#   then add the `python` package to this list
# - Uncomment the open-vm-tools line if this is going to run in vmware and are
#   not going to use vmware-tools that's distributed with it. Don't think the
#   --no-install-recommends is needed to not install desktop tools but doesn't
#   hurt anything
%packages
# -- required for %post --
vim
software-properties-common
parted
# -- pretty much required --
gpg-agent  # apt-key needs this when piping certs in through stdin
curl
openssh-server
net-tools  # this includes commands like ifconfig and netstat
wget
man
# -- additional packages you'll likely want --
bash-completion  # personally I always install it but not everyone uses bash
#chrony  # default time server in 18.04. systemd will manage time if this doesn't
#haveged  # helps keep entropy pool full on VMs
qemu-guest-agent


%post --nochroot
# We need to have control of when we're in chroot and not since the parted
# commands have to run within the chroot (because of shared libraries) but then
# need to exit chroot and use the install system's lvm commands
#
# So to run anything within chroot can use the helper `in-target` command.
# Because of how shells redirect things all the echo and cat commands don't use
# `in-target` and instead prefixed the file with `/target/`
#

# -- begin setup second drive --
#in-target parted --script --align=opt /dev/sdb mklabel msdos
#in-target parted --script --align=opt /dev/sdb mkpart primary 2048s 100%
#in-target parted --script --align=opt /dev/sdb set 1 lvm on
#in-target parted --script /dev/sdb print
#/sbin/pvcreate /dev/sdb1
#/sbin/vgcreate -A n vg1 /dev/sdb1
#/sbin/lvcreate -A n -L 5G -n srv vg1
# the mkfs must succeed in order for line to be added to fstab
#mkfs.ext4 -q -m 0 /dev/mapper/vg1-srv \
#    && echo "/dev/mapper/vg1-srv /srv ext4 defaults,noatime,nodev 0 2" >>/target/etc/fstab
# -- end setup second drive --

# -- begin security hardening --
# Change default umask from 022 to 027 (not world readable)
#in-target sed -i -e 's/^\(UMASK\W*\)[0-9]\+$/\1027/' /etc/login.defs

# Add noatime to /
in-target sed -i -e 's/\(errors=remount-ro\)/noatime,\1/' /etc/fstab
# Add noatime and nodev to everything else
in-target sed -i -e 's/\(boot.*defaults\)/\1,noatime,nodev/' /etc/fstab
in-target sed -i -e 's/\(home.*defaults\)/\1,noatime,nodev/' /etc/fstab
in-target sed -i -e 's/\(usr.*defaults\)/\1,noatime,nodev/' /etc/fstab
# Remove nodev from this one if it causes issues for you
#in-target sed -i -e 's/\(var .*defaults\)/\1,noatime,nodev/' /etc/fstab
# Add noatime, nodev, and noexec to /var/log
in-target sed -i -e 's/\(var\/log .*defaults\)/\1,noatime,nodev,noexec/' /etc/fstab
# Add line to enable noexec on /dev/shm
echo "none /dev/shm tmpfs defaults,noexec,nosuid,nodev 0 0" >>/target/etc/fstab
# -- end security hardening --


# Set some defaults for apt to keep things tidy
cat > /target/etc/apt/apt.conf.d/90local <<"_EOF_"
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Unattended-Upgrade "1";
APT::Periodic::AutocleanInterval "1";
APT::Periodic::MaxSize "200";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
#Acquire::http::Proxy "http://my-local-cache:3142";
_EOF_

# -- begin vim package customizations --
echo "set background=dark" >>/target/etc/vim/vimrc.local
# -- end vim package customizations --

# -- begin install git from 'Ubuntu Git Maintainers' PPA --
#in-target add-apt-repository -y ppa:git-core/ppa
#in-target apt-get -qq -y update
#in-target apt-get -qq -y install git
# -- end install git from 'Ubuntu Git Maintainers' PPA --

# -- begin set xdg base directories --
#cat > /target/etc/profile.d/xdg_basedir.sh <<"_EOF_"
# Set XDG base directory global variables
# XDG_RUNTIME_HOME is set on user login
#export XDG_DATA_HOME="${XDG_DATA_HOME:-"${HOME}/.local/share"}"
#export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"${HOME}/.config"}"
#export XDG_CACHE_HOME="${XDG_CACHE_HOME:-"${HOME}/.cache"}"
#_EOF_
#in-target chmod 0644 /etc/profile.d/xdg_basedir.sh
# -- end set xdg base directories --

# Clean up
in-target apt-get -qq -y autoremove
in-target apt-get clean
in-target rm -f /var/cache/apt/*cache.bin
in-target rm -rf /var/lib/apt/lists/*
